# --- compilers ---
CC  = @CC@
GAC = gac

# -- initial flags ---
CFLAGS  ?= @WARNINGS@
CFLAGS  += -I. @BUILD_MODE_CFLAGS@
LDFLAGS ?= 
LDFLAGS += @BUILD_MODE_LDFLAGS@

# -- Sources and targets ---
OPENMP_SRC := mats.c backtrack.c minimalf.c uniqueg.c orientedg.c
OPENMP_APP := $(patsubst %.c, %, $(OPENMP_SRC))
OPENMP_OBJ := tlsbuf.o

NAUTY_SRC := mats.c backtrack.c orientedf.c orientedg.c upperg.c upperf.c canonicalg.c uniqueg.c spinf.c spincf.c orbitg.c minimalf.c
NAUTY_SRC += $(wildcard test-*.c)
NAUTY_APP := $(patsubst %.c, %, $(NAUTY_SRC))
NAUTY_OBJ := dag.o bucket.o

APP  := $(sort ${OPENMP_APP} ${NAUTY_APP})
OBJ  := bott.o common.o
LIB  := gap.so
LOBJ := $(patsubst %.o, %.lo, $(OBJ))

TARGETS := $(APP) $(LIB)

# --- list of object files for application targets ---
APP_OBJ := $(APP:%=%.o)

# --- automatic dependency files (for all .o files, including app ones) ---
DEPS := $(patsubst %.o,%.d,$(OBJ) $(APP_OBJ) $(OPENMP_OBJ) $(NAUTY_OBJ))

# -- main targets ---
.PHONY: all app debug profile sanitize clean
all: $(TARGETS)
app: $(APP)

# The following rules set compilation and linking flags for the target specified by $(OPENMP_APP).
# - CFLAGS and LDFLAGS are augmented with OpenMP-specific flags (@OPENMP_CFLAGS@) to enable OpenMP support.
# - The object files required for building $(OPENMP_APP) are listed in OBJ (bott.o and common.o).
$(OPENMP_APP): CFLAGS  += @OPENMP_CFLAGS@
$(OPENMP_APP): LDFLAGS += @OPENMP_CFLAGS@
$(OPENMP_APP): OBJ     += $(OPENMP_OBJ)

# The following rules configure the build for the $(NAUTY_APP) target:
# - CFLAGS are extended with compiler flags for Nauty, GLib, and XXHash libraries.
# - LDFLAGS are extended with runtime path and linker flags for Nauty, GLib, and XXHash libraries.
# - OBJ specifies the object files required to build $(NAUTY_APP).
$(NAUTY_APP): CFLAGS  += @NAUTY_CFLAGS@ @GLIB_CFLAGS@ @XXHASH_CFLAGS@
$(NAUTY_APP): LDFLAGS += @RPATH@ @NAUTY_LIBS@ @GLIB_LIBS@ @XXHASH_LIBS@
$(NAUTY_APP): OBJ     += $(NAUTY_OBJ)

# The following rule appends additional compiler flags (@APP_CFLAGS@) to all application targets in $(APP).
# This allows for custom flags to be specified for all application builds, independent of other target-specific flags.
# $(APP): CFLAGS += @APP_CFLAGS@

# Additional includes for all .o objects (e.g., nauty include)
# %.o: CFLAGS += @NAUTY_CFLAGS@

# This rule modifies the CFLAGS for compiling bucket.o by appending GLIB and XXHASH specific flags.
# It also specifies that bucket.o depends on the header file d6pack11.h, ensuring that changes to the header trigger recompilation.
# bucket.o: CFLAGS += @GLIB_CFLAGS@ @XXHASH_CFLAGS@
bucket.o: d6pack11.h

minimalf.o: adjpack11.h parse_scaled.h

tlsbuf.o: CFLAGS += @OPENMP_CFLAGS@

.SECONDEXPANSION:

# --- building applications ---
# Each app: links its own %.o and shared $(OBJ)
$(APP): %: %.o $$(OBJ)
	$(CC) -o $@ $@.o $(OBJ) $(LDFLAGS)


# --- object compilation rules with automatic dependencies ---
# Generate .d (header dependencies) alongside .o
# -MMD: generate dependencies only for user headers; -MP: add phony targets for missing headers
%.o: %.c
	$(CC) -MMD -MP -c $(CFLAGS) -o $@ $<

# --- building gap library ---
# Compile .lo files from .c sources using GAC, depending on their headers and config.h
%.lo: %.c %.h config.h
	$(GAC) -o $@ $< -c -p "$(CFLAGS)"

# Add Nauty and GLib flags for building the shared library
%.so: CFLAGS += @NAUTY_CFLAGS@ @GLIB_CFLAGS@
# Build the shared library (.so) from .c source and .lo objects using GAC
%.so: %.c $(LOBJ)
	$(GAC) -d $< -o $@ -p "$(CFLAGS)" -L "$(LOBJ) $(LDFLAGS)"

# -- profile/debug/sanitize build chains ---
# These targets override CFLAGS for special build types and build all apps.
# 'debug' enables debug symbols and disables optimizations.
# 'profile' enables profiling instrumentation.
# 'sanitize' enables address sanitizer and debug info.

debug: CFLAGS := -I. -g -O0 @OPENMP_CFLAGS@ @CPPFLAGS@ @WARNINGS@ -DDEBUG
debug: app

profile: CFLAGS := -I. -pg @CFLAGS@ @CPPFLAGS@ @WARNINGS@ -fno-inline -DPROFILE
profile: LDFLAGS += -pg
profile: app

sanitize: CFLAGS := -I. -g -O2 -fsanitize=address -fno-omit-frame-pointer @OPENMP_CFLAGS@ @CPPFLAGS@ @WARNINGS@ 
sanitize: LDFLAGS += -fsanitize=address,undefined
sanitize: app


# --- Include generated header dependencies (if they exist) ---
-include $(DEPS)

# -- remove all built targets and object files ---
clean:
	@rm -f $(wildcard $(TARGETS) *.o *.lo *.d)

distclean: clean
	@rm -f $(wildcard test.d6)

# -- make test.d6 file - the default for testing apps --
test-data:
	@geng 4 | directg -a >  test.d6
	@geng 5 | directg -a >> test.d6
	@geng 6 | directg -a >> test.d6
	@geng 7 | directg -a >> test.d6
	@geng 8 20:24 | directg -a >> test.d6
	@geng 9  9:11 | directg -a >> test.d6
	@geng 10 9:11 | directg -a >> test.d6
	@geng 11 9:11 | directg -a >> test.d6